import { createOpenAI } from "@ai-sdk/openai"
import { generateText } from "ai"
import { GeneratedTestProposal, createCommitWithTests, octokit } from "./github"
import { PullRequestContext } from "./handlers"

const openai = createOpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
  compatibility: "strict"
})

/****************************************************************
 * generateTestsForChanges:
 * Takes the changed files, crafts a prompt, and asks for test proposals in JSON.
 ****************************************************************/
async function generateTestsForChanges(
  changedFiles: PullRequestContext["changedFiles"]
): Promise<GeneratedTestProposal[]> {
  const prompt = `
You are an expert software developer who specializes in writing tests.
Review the following changed files, then propose new or updated Jest test files.
Output must be JSON only, with the following schema:

[
  {
    "filename": "test filename (e.g. __tests__/MyComponent.test.ts)",
    "testContent": "the test file content"
  },
  ...
]

Changed files:
${changedFiles
  .map(
    file => `
File: ${file.filename}
Patch (diff):
${file.patch}

Current Content:
${file.content ?? "N/A"}
`
  )
  .join("\n---\n")}

Return ONLY valid JSON as described. No code blocks, no additional commentary.
`

  try {
    const { text } = await generateText({
      model: openai("gpt-4"),
      prompt
    })

    const proposals: GeneratedTestProposal[] = JSON.parse(text.trim())
    return proposals
  } catch (err) {
    console.error("Error generating tests from AI:", err)
    return []
  }
}

/**
 * handleTestGeneration:
 * Main entry point for “Level 2” agent logic.
 */
export async function handleTestGeneration(context: PullRequestContext) {
  const { owner, repo, pullNumber, baseRef, changedFiles } = context

  try {
    // 1) Generate test proposals
    const testProposals = await generateTestsForChanges(changedFiles)

    if (testProposals.length === 0) {
      await octokit.issues.createComment({
        owner,
        repo,
        issue_number: pullNumber,
        body: "No test proposals were generated by the AI this time."
      })
      return
    }

    // 2) Create a new branch + commit test files
    const newBranchName = `test-gen/pr-${pullNumber}-${Date.now()}`
    await createCommitWithTests(
      owner,
      repo,
      baseRef,
      newBranchName,
      testProposals
    )

    // 3) Create a new PR with the AI-generated tests
    const { data: newPR } = await octokit.pulls.create({
      owner,
      repo,
      title: `AI-Generated Tests for PR #${pullNumber}`,
      head: newBranchName,
      base: baseRef,
      body: `This PR was automatically created to add AI-generated test files for the changes in #${pullNumber}.`
    })

    // 4) Comment on original PR with a link to the new tests PR
    const testList = testProposals.map(t => `- **${t.filename}**`).join("\n")
    const commentBody = `### AI Test Generator

Proposed new test files:
${testList}

They are available in PR #${newPR.number} ([View AI-Generated Tests](https://github.com/${owner}/${repo}/pull/${newPR.number})).

> Merge or modify them as you see fit!

*(Automated comment by the AI test generator)*`

    await octokit.issues.createComment({
      owner,
      repo,
      issue_number: pullNumber,
      body: commentBody
    })
  } catch (err) {
    console.error("Error in test generation:", err)
  }
}
