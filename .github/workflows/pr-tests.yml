name: Run Unit + E2E Tests on PR

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Use Node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      # STEP 1: Run Jest (unit tests) and produce jest-results.json
      - name: Run Jest (unit) in CI mode
        run: |
          npm run test:unit:ci || true
        # "|| true" ensures we don't abort even if tests fail

      # STEP 2: Run Playwright (e2e) in CI mode
      - name: Run Playwright (e2e) in CI mode
        run: |
          npm run test:e2e:ci || true
        # This should produce a JSON file in playwright-report/report.json
        # (adjust to your actual path if needed)

      # STEP 3: Parse + comment results
      - name: Parse & Comment on PR
        if: always() # Ensure we run this step even if tests fail
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let commentBody = `### Combined Test Results\n\n`;

            // 1) Parse JEST results
            try {
              const jestRaw = fs.readFileSync('jest-results.json', 'utf8');
              const jestData = JSON.parse(jestRaw);
              commentBody += '**Jest Unit Tests**\n';
              commentBody += `- Total: ${jestData.numTotalTests}\n`;
              commentBody += `- Passed: ${jestData.numPassedTests}\n`;
              commentBody += `- Failed: ${jestData.numFailedTests}\n\n`;
            } catch (err) {
              commentBody += `**Jest results**: Could not read \`jest-results.json\`. Possibly no file or an error.\n\n`;
            }

            // 2) Parse PLAYWRIGHT results
            //   By default with `--reporter=json --output=playwright-report`, 
            //   the JSON file is "playwright-report/report.json"
            try {
              const pwRaw = fs.readFileSync('playwright-report/report.json', 'utf8');
              const pwData = JSON.parse(pwRaw);
              
              // The structure of PW JSON depends on your version. 
              // Typically it has a "suites" array with test results. 
              // We'll do a quick count:
              let total = 0;
              let passed = 0;
              let failed = 0;

              // This is very simplified. Real data might need more nested checks.
              if (Array.isArray(pwData.suites)) {
                for (const suite of pwData.suites) {
                  if (Array.isArray(suite.specs)) {
                    for (const spec of suite.specs) {
                      if (Array.isArray(spec.tests)) {
                        for (const test of spec.tests) {
                          total++;
                          if (test.outcome === 'expected') passed++;
                          if (test.outcome === 'unexpected') failed++;
                        }
                      }
                    }
                  }
                }
              }

              commentBody += '**Playwright E2E Tests**\n';
              commentBody += `- Total: ${total}\n`;
              commentBody += `- Passed: ${passed}\n`;
              commentBody += `- Failed: ${failed}\n\n`;
            } catch (err) {
              commentBody += `**Playwright results**: Could not read \`playwright-report/report.json\`. Possibly no file or an error.\n\n`;
            }

            // 3) Post final comment
            //    We always do it, but you can add logic if you want 
            //    to only post if there's a PR event.
            const result = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

            console.log('Comment posted:', result.data.html_url);
